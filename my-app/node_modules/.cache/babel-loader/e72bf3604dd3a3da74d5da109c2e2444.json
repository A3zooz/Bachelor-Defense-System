{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n} // Copy-pasted from:\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/rows/generatorRows.js\n\n\nimport generateRow from './row.js';\nexport default function generateRows(data, _ref) {\n  var schema = _ref.schema,\n      headerStyle = _ref.headerStyle,\n      getStyle = _ref.getStyle,\n      getSharedString = _ref.getSharedString,\n      customFont = _ref.customFont,\n      dateFormat = _ref.dateFormat;\n\n  if (schema) {\n    var header = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(schema), _step; !(_step = _iterator()).done;) {\n      var column = _step.value; // If at least one schema column has a title,\n      // then print a header row.\n\n      if (column.column) {\n        header = [schema.map(function (column) {\n          return _objectSpread({\n            type: String,\n            value: column.column,\n            align: column.align\n          }, headerStyle || DEFAULT_HEADER_STYLE);\n        })];\n        break;\n      }\n    }\n\n    data = header.concat(data.map(function (row) {\n      return schema.map(function (column) {\n        return _objectSpread(_objectSpread({}, column), {}, {\n          value: column.value(row)\n        });\n      });\n    }));\n  }\n\n  return data.map(function (row, index) {\n    return generateRow(row, index, {\n      getStyle: getStyle,\n      getSharedString: getSharedString,\n      customFont: customFont,\n      dateFormat: dateFormat,\n      usesSchema: schema !== undefined\n    });\n  }).join('');\n}\nvar DEFAULT_HEADER_STYLE = {\n  fontWeight: 'bold'\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;AACA;;;AAEA,OAAOA,WAAP,MAAwB,UAAxB;AAEA,eAAe,SAASC,YAAT,CAAsBC,IAAtB,QAOZ;EAAA,IANFC,MAME,QANFA,MAME;EAAA,IALFC,WAKE,QALFA,WAKE;EAAA,IAJFC,QAIE,QAJFA,QAIE;EAAA,IAHFC,eAGE,QAHFA,eAGE;EAAA,IAFFC,UAEE,QAFFA,UAEE;EAAA,IADFC,UACE,QADFA,UACE;;EACF,IAAIL,MAAJ,EAAY;IACX,IAAIM,MAAM,GAAG,EAAb;;IACA,qDAAqBN,MAArB,wCAA6B;MAAA,IAAlBO,MAAkB,gBAC5B;MACA;;MACA,IAAIA,MAAM,CAACA,MAAX,EAAmB;QAClBD,MAAM,GAAG,CAACN,MAAM,CAACQ,GAAPR,CAAW,UAACO,MAAD;UAAA;YACpBE,IAAI,EAAEC,MADc;YAEpBC,KAAK,EAAEJ,MAAM,CAACA,MAFM;YAGpBK,KAAK,EAAEL,MAAM,CAACK;UAHM,GAKhBX,WAAW,IAAIY,oBALC;QAAX,EAAD,CAATP;QAOA;MACA;IACD;;IACDP,IAAI,GAAGO,MAAM,CAACQ,MAAPR,CAAcP,IAAI,CAACS,GAALT,CAAS,UAACgB,GAAD;MAAA,OAASf,MAAM,CAACQ,GAAPR,CACtC,UAACO,MAAD;QAAA,uCACIA,MADJ;UAECI,KAAK,EAAEJ,MAAM,CAACI,KAAPJ,CAAaQ,GAAbR;QAFR;MADsC,EAAT;IAAT,EAAdD,CAAPP;EAMA;;EACD,OAAOA,IAAI,CAACS,GAALT,CAAS,UAACgB,GAAD,EAAMC,KAAN;IAAA,OAAgBnB,WAAW,CAACkB,GAAD,EAAMC,KAAN,EAAa;MACvDd,QAAQ,EAARA,QADuD;MAEvDC,eAAe,EAAfA,eAFuD;MAGvDC,UAAU,EAAVA,UAHuD;MAIvDC,UAAU,EAAVA,UAJuD;MAKvDY,UAAU,EAAEjB,MAAM,KAAKkB;IALgC,CAAb,CAA3B;EAAT,GAMHC,IANGpB,CAME,EANFA,CAAP;AAOA;AAED,IAAMc,oBAAoB,GAAG;EAC5BO,UAAU,EAAE;AADgB,CAA7B","names":["generateRow","generateRows","data","schema","headerStyle","getStyle","getSharedString","customFont","dateFormat","header","column","map","type","String","value","align","DEFAULT_HEADER_STYLE","concat","row","index","usesSchema","undefined","join","fontWeight"],"sources":["C:\\Users\\anasn\\Downloads\\Bachelor-Defense-System-5\\my-app\\node_modules\\write-excel-file\\source\\write\\rows.js"],"sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/rows/generatorRows.js\r\n\r\nimport generateRow from './row.js'\r\n\r\nexport default function generateRows(data, {\r\n\tschema,\r\n\theaderStyle,\r\n\tgetStyle,\r\n\tgetSharedString,\r\n\tcustomFont,\r\n\tdateFormat\r\n}) {\r\n\tif (schema) {\r\n\t\tlet header = []\r\n\t\tfor (const column of schema) {\r\n\t\t\t// If at least one schema column has a title,\r\n\t\t\t// then print a header row.\r\n\t\t\tif (column.column) {\r\n\t\t\t\theader = [schema.map((column) => ({\r\n\t\t\t\t\ttype: String,\r\n\t\t\t\t\tvalue: column.column,\r\n\t\t\t\t\talign: column.align,\r\n\t\t\t\t\t// `headerStyle` also overwrites `align`, if specified.\r\n\t\t\t\t\t...(headerStyle || DEFAULT_HEADER_STYLE)\r\n\t\t\t\t}))]\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\tdata = header.concat(data.map((row) => schema.map(\r\n\t\t\t(column) => ({\r\n\t\t\t\t...column,\r\n\t\t\t\tvalue: column.value(row)\r\n\t\t\t})\r\n\t\t)))\r\n\t}\r\n\treturn data.map((row, index) => generateRow(row, index, {\r\n\t\tgetStyle,\r\n\t\tgetSharedString,\r\n\t\tcustomFont,\r\n\t\tdateFormat,\r\n\t\tusesSchema: schema !== undefined\r\n\t})).join('')\r\n}\r\n\r\nconst DEFAULT_HEADER_STYLE = {\r\n\tfontWeight: 'bold'\r\n}"]},"metadata":{},"sourceType":"module"}