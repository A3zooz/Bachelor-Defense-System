{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n} // Copy-pasted from:\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/rows/formatRow.js\n\n\nimport generateCell from './cell.js'; // import Integer from '../types/Integer.js'\n\nexport default function generateRow(row, rowIndex, _ref) {\n  var getStyle = _ref.getStyle,\n      getSharedString = _ref.getSharedString,\n      customFont = _ref.customFont,\n      dateFormat = _ref.dateFormat,\n      usesSchema = _ref.usesSchema; // To ensure the row number starts as in Excel.\n\n  var rowNumber = rowIndex + 1;\n  var rowHeight;\n  var rowCells = row.map(function (cell, columnIndex) {\n    if (cell === undefined || cell === null) {\n      return '';\n    }\n\n    var align = cell.align,\n        alignVertical = cell.alignVertical,\n        fontFamily = cell.fontFamily,\n        fontSize = cell.fontSize,\n        fontWeight = cell.fontWeight,\n        fontStyle = cell.fontStyle,\n        height = cell.height,\n        wrap = cell.wrap,\n        color = cell.color,\n        backgroundColor = cell.backgroundColor,\n        borderColor = cell.borderColor,\n        borderStyle = cell.borderStyle,\n        leftBorderColor = cell.leftBorderColor,\n        leftBorderStyle = cell.leftBorderStyle,\n        rightBorderColor = cell.rightBorderColor,\n        rightBorderStyle = cell.rightBorderStyle,\n        topBorderColor = cell.topBorderColor,\n        topBorderStyle = cell.topBorderStyle,\n        bottomBorderColor = cell.bottomBorderColor,\n        bottomBorderStyle = cell.bottomBorderStyle;\n    var type = cell.type,\n        value = cell.value,\n        format = cell.format;\n\n    if (isEmpty(value)) {\n      value = null;\n    } else {\n      // Get cell value type.\n      if (type === undefined) {\n        if (!usesSchema) {\n          type = detectValueType(value);\n        }\n\n        if (type === undefined) {\n          // The default cell value type is `String`.\n          type = String;\n          value = String(value);\n        }\n      }\n    } // Validate `format` property.\n\n\n    if (format) {\n      if (type !== Date && type !== Number) {\n        // && type !== Integer) {\n        throw new Error('`format` can only be used on `Date` or `Number` cells'); // or `Integer` cells')\n      }\n    } else {\n      if (type === Date) {\n        format = dateFormat;\n      }\n    }\n\n    var cellStyleId;\n\n    if (fontFamily || fontSize || fontWeight || fontStyle || align || alignVertical || format || wrap || color || backgroundColor || borderColor || borderStyle || leftBorderColor || leftBorderStyle || rightBorderColor || rightBorderStyle || topBorderColor || topBorderStyle || bottomBorderColor || bottomBorderStyle || customFont) {\n      cellStyleId = getStyle(fontFamily, fontSize, fontWeight, fontStyle, align, alignVertical, format, wrap, color, backgroundColor, borderColor, borderStyle, leftBorderColor, leftBorderStyle, rightBorderColor, rightBorderStyle, topBorderColor, topBorderStyle, bottomBorderColor, bottomBorderStyle);\n    }\n\n    if (height) {\n      if (rowHeight === undefined || rowHeight < height) {\n        rowHeight = height;\n      }\n    }\n\n    return generateCell(rowNumber, columnIndex, value, type, cellStyleId, getSharedString);\n  }).join('');\n  return \"<row r=\\\"\".concat(rowNumber, \"\\\"\") + (rowHeight ? \" ht=\\\"\".concat(rowHeight, \"\\\" customHeight=\\\"1\\\"\") : '') + '>' + rowCells + '</row>';\n}\n\nfunction isEmpty(value) {\n  return value === undefined || value === null || value === '';\n}\n\nfunction detectValueType(value) {\n  switch (_typeof(value)) {\n    case 'string':\n      return String;\n\n    case 'number':\n      return Number;\n\n    case 'boolean':\n      return Boolean;\n\n    default:\n      if (value instanceof Date) {\n        return Date;\n      }\n\n  }\n}","map":{"version":3,"mappings":";;;;;;;;EAAA;AACA;;;AAEA,OAAOA,YAAP,MAAyB,WAAzB,C,CAEA;;AAEA,eAAe,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,QAA1B,QAMZ;EAAA,IALFC,QAKE,QALFA,QAKE;EAAA,IAJFC,eAIE,QAJFA,eAIE;EAAA,IAHFC,UAGE,QAHFA,UAGE;EAAA,IAFFC,UAEE,QAFFA,UAEE;EAAA,IADFC,UACE,QADFA,UACE,EACF;;EACA,IAAMC,SAAS,GAAGN,QAAQ,GAAG,CAA7B;EACA,IAAIO,SAAJ;EACA,IAAMC,QAAQ,GAAGT,GAAG,CAClBU,GADeV,CACX,UAACW,IAAD,EAAOC,WAAP,EAAuB;IAC3B,IAAID,IAAI,KAAKE,SAATF,IAAsBA,IAAI,KAAK,IAAnC,EAAyC;MACxC,OAAO,EAAP;IACA;;IAED,IACCG,KADD,GAqBIH,IArBJ,CACCG,KADD;IAAA,IAECC,aAFD,GAqBIJ,IArBJ,CAECI,aAFD;IAAA,IAGCC,UAHD,GAqBIL,IArBJ,CAGCK,UAHD;IAAA,IAICC,QAJD,GAqBIN,IArBJ,CAICM,QAJD;IAAA,IAKCC,UALD,GAqBIP,IArBJ,CAKCO,UALD;IAAA,IAMCC,SAND,GAqBIR,IArBJ,CAMCQ,SAND;IAAA,IAOCC,MAPD,GAqBIT,IArBJ,CAOCS,MAPD;IAAA,IAQCC,IARD,GAqBIV,IArBJ,CAQCU,IARD;IAAA,IASCC,KATD,GAqBIX,IArBJ,CASCW,KATD;IAAA,IAUCC,eAVD,GAqBIZ,IArBJ,CAUCY,eAVD;IAAA,IAWCC,WAXD,GAqBIb,IArBJ,CAWCa,WAXD;IAAA,IAYCC,WAZD,GAqBId,IArBJ,CAYCc,WAZD;IAAA,IAaCC,eAbD,GAqBIf,IArBJ,CAaCe,eAbD;IAAA,IAcCC,eAdD,GAqBIhB,IArBJ,CAcCgB,eAdD;IAAA,IAeCC,gBAfD,GAqBIjB,IArBJ,CAeCiB,gBAfD;IAAA,IAgBCC,gBAhBD,GAqBIlB,IArBJ,CAgBCkB,gBAhBD;IAAA,IAiBCC,cAjBD,GAqBInB,IArBJ,CAiBCmB,cAjBD;IAAA,IAkBCC,cAlBD,GAqBIpB,IArBJ,CAkBCoB,cAlBD;IAAA,IAmBCC,iBAnBD,GAqBIrB,IArBJ,CAmBCqB,iBAnBD;IAAA,IAoBCC,iBApBD,GAqBItB,IArBJ,CAoBCsB,iBApBD;IAuBA,IACCC,IADD,GAIIvB,IAJJ,CACCuB,IADD;IAAA,IAECC,KAFD,GAIIxB,IAJJ,CAECwB,KAFD;IAAA,IAGCC,MAHD,GAIIzB,IAJJ,CAGCyB,MAHD;;IAMA,IAAIC,OAAO,CAACF,KAAD,CAAX,EAAoB;MACnBA,KAAK,GAAG,IAARA;IADD,OAEO;MACN;MACA,IAAID,IAAI,KAAKrB,SAAb,EAAwB;QACvB,IAAI,CAACP,UAAL,EAAiB;UAChB4B,IAAI,GAAGI,eAAe,CAACH,KAAD,CAAtBD;QACA;;QACD,IAAIA,IAAI,KAAKrB,SAAb,EAAwB;UACvB;UACAqB,IAAI,GAAGK,MAAPL;UACAC,KAAK,GAAGI,MAAM,CAACJ,KAAD,CAAdA;QACA;MACD;IA/CyB,EAkD3B;;;IACA,IAAIC,MAAJ,EAAY;MACX,IAAIF,IAAI,KAAKM,IAATN,IAAkBA,IAAI,KAAKO,MAA/B,EAAuC;QAAE;QACxC,MAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN,CADsC,CACmC;MACzE;IAHF,OAIO;MACN,IAAIR,IAAI,KAAKM,IAAb,EAAmB;QAClBJ,MAAM,GAAG/B,UAAT+B;MACA;IACD;;IAED,IAAIO,WAAJ;;IACA,IACC3B,UAAU,IACVC,QADAD,IAEAE,UAFAF,IAGAG,SAHAH,IAIAF,KAJAE,IAKAD,aALAC,IAMAoB,MANApB,IAOAK,IAPAL,IAQAM,KARAN,IASAO,eATAP,IAUAQ,WAVAR,IAWAS,WAXAT,IAYAU,eAZAV,IAaAW,eAbAX,IAcAY,gBAdAZ,IAeAa,gBAfAb,IAgBAc,cAhBAd,IAiBAe,cAjBAf,IAkBAgB,iBAlBAhB,IAmBAiB,iBAnBAjB,IAoBAZ,UArBD,EAsBE;MACDuC,WAAW,GAAGzC,QAAQ,CACrBc,UADqB,EAErBC,QAFqB,EAGrBC,UAHqB,EAIrBC,SAJqB,EAKrBL,KALqB,EAMrBC,aANqB,EAOrBqB,MAPqB,EAQrBf,IARqB,EASrBC,KATqB,EAUrBC,eAVqB,EAWrBC,WAXqB,EAYrBC,WAZqB,EAarBC,eAbqB,EAcrBC,eAdqB,EAerBC,gBAfqB,EAgBrBC,gBAhBqB,EAiBrBC,cAjBqB,EAkBrBC,cAlBqB,EAmBrBC,iBAnBqB,EAoBrBC,iBApBqB,CAAtBU;IAsBA;;IAED,IAAIvB,MAAJ,EAAY;MACX,IAAIZ,SAAS,KAAKK,SAAdL,IAA2BA,SAAS,GAAGY,MAA3C,EAAmD;QAClDZ,SAAS,GAAGY,MAAZZ;MACA;IACD;;IAED,OAAOV,YAAY,CAClBS,SADkB,EAElBK,WAFkB,EAGlBuB,KAHkB,EAIlBD,IAJkB,EAKlBS,WALkB,EAMlBxC,eANkB,CAAnB;EApHe,GA6HfyC,IA7He5C,CA6HV,EA7HUA,CAAjB;EA+HA,OAAO,mBAAWO,SAAX,WACLC,SAAS,mBAAWA,SAAX,6BAA2C,EAD/C,IAEN,GAFM,GAGNC,QAHM,GAIN,QAJD;AAKA;;AAED,SAAS4B,OAAT,CAAiBF,KAAjB,EAAwB;EACtB,OAAOA,KAAK,KAAKtB,SAAVsB,IAAuBA,KAAK,KAAK,IAAjCA,IAAyCA,KAAK,KAAK,EAA1D;AACD;;AAED,SAASG,eAAT,CAAyBH,KAAzB,EAAgC;EAC9B,gBAAeA,KAAf;IACE,KAAK,QAAL;MACE,OAAOI,MAAP;;IACF,KAAK,QAAL;MACE,OAAOE,MAAP;;IACF,KAAK,SAAL;MACE,OAAOI,OAAP;;IACF;MACE,IAAIV,KAAK,YAAYK,IAArB,EAA2B;QACzB,OAAOA,IAAP;MACD;;EAVL;AAYD","names":["generateCell","generateRow","row","rowIndex","getStyle","getSharedString","customFont","dateFormat","usesSchema","rowNumber","rowHeight","rowCells","map","cell","columnIndex","undefined","align","alignVertical","fontFamily","fontSize","fontWeight","fontStyle","height","wrap","color","backgroundColor","borderColor","borderStyle","leftBorderColor","leftBorderStyle","rightBorderColor","rightBorderStyle","topBorderColor","topBorderStyle","bottomBorderColor","bottomBorderStyle","type","value","format","isEmpty","detectValueType","String","Date","Number","Error","cellStyleId","join","Boolean"],"sources":["C:\\Users\\anasn\\Downloads\\Bachelor-Defense-System-5\\my-app\\node_modules\\write-excel-file\\source\\write\\row.js"],"sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/rows/formatRow.js\r\n\r\nimport generateCell from './cell.js'\r\n\r\n// import Integer from '../types/Integer.js'\r\n\r\nexport default function generateRow(row, rowIndex, {\r\n\tgetStyle,\r\n\tgetSharedString,\r\n\tcustomFont,\r\n\tdateFormat,\r\n\tusesSchema\r\n}) {\r\n\t// To ensure the row number starts as in Excel.\r\n\tconst rowNumber = rowIndex + 1\r\n\tlet rowHeight\r\n\tconst rowCells = row\r\n\t\t.map((cell, columnIndex) => {\r\n\t\t\tif (cell === undefined || cell === null) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\r\n\t\t\tconst {\r\n\t\t\t\talign,\r\n\t\t\t\talignVertical,\r\n\t\t\t\tfontFamily,\r\n\t\t\t\tfontSize,\r\n\t\t\t\tfontWeight,\r\n\t\t\t\tfontStyle,\r\n\t\t\t\theight,\r\n\t\t\t\twrap,\r\n\t\t\t\tcolor,\r\n\t\t\t\tbackgroundColor,\r\n\t\t\t\tborderColor,\r\n\t\t\t\tborderStyle,\r\n\t\t\t\tleftBorderColor,\r\n\t\t\t\tleftBorderStyle,\r\n\t\t\t\trightBorderColor,\r\n\t\t\t\trightBorderStyle,\r\n\t\t\t\ttopBorderColor,\r\n\t\t\t\ttopBorderStyle,\r\n\t\t\t\tbottomBorderColor,\r\n\t\t\t\tbottomBorderStyle\r\n\t\t\t} = cell\r\n\r\n\t\t\tlet {\r\n\t\t\t\ttype,\r\n\t\t\t\tvalue,\r\n\t\t\t\tformat\r\n\t\t\t} = cell\r\n\r\n\t\t\tif (isEmpty(value)) {\r\n\t\t\t\tvalue = null\r\n\t\t\t} else {\r\n\t\t\t\t// Get cell value type.\r\n\t\t\t\tif (type === undefined) {\r\n\t\t\t\t\tif (!usesSchema) {\r\n\t\t\t\t\t\ttype = detectValueType(value)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (type === undefined) {\r\n\t\t\t\t\t\t// The default cell value type is `String`.\r\n\t\t\t\t\t\ttype = String\r\n\t\t\t\t\t\tvalue = String(value)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Validate `format` property.\r\n\t\t\tif (format) {\r\n\t\t\t\tif (type !== Date &&  type !== Number) { // && type !== Integer) {\r\n\t\t\t\t\tthrow new Error('`format` can only be used on `Date` or `Number` cells') // or `Integer` cells')\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (type === Date) {\r\n\t\t\t\t\tformat = dateFormat\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet cellStyleId\r\n\t\t\tif (\r\n\t\t\t\tfontFamily ||\r\n\t\t\t\tfontSize ||\r\n\t\t\t\tfontWeight ||\r\n\t\t\t\tfontStyle ||\r\n\t\t\t\talign ||\r\n\t\t\t\talignVertical ||\r\n\t\t\t\tformat ||\r\n\t\t\t\twrap ||\r\n\t\t\t\tcolor ||\r\n\t\t\t\tbackgroundColor ||\r\n\t\t\t\tborderColor ||\r\n\t\t\t\tborderStyle ||\r\n\t\t\t\tleftBorderColor ||\r\n\t\t\t\tleftBorderStyle ||\r\n\t\t\t\trightBorderColor ||\r\n\t\t\t\trightBorderStyle ||\r\n\t\t\t\ttopBorderColor ||\r\n\t\t\t\ttopBorderStyle ||\r\n\t\t\t\tbottomBorderColor ||\r\n\t\t\t\tbottomBorderStyle ||\r\n\t\t\t\tcustomFont\r\n\t\t\t) {\r\n\t\t\t\tcellStyleId = getStyle(\r\n\t\t\t\t\tfontFamily,\r\n\t\t\t\t\tfontSize,\r\n\t\t\t\t\tfontWeight,\r\n\t\t\t\t\tfontStyle,\r\n\t\t\t\t\talign,\r\n\t\t\t\t\talignVertical,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\twrap,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tbackgroundColor,\r\n\t\t\t\t\tborderColor,\r\n\t\t\t\t\tborderStyle,\r\n\t\t\t\t\tleftBorderColor,\r\n\t\t\t\t\tleftBorderStyle,\r\n\t\t\t\t\trightBorderColor,\r\n\t\t\t\t\trightBorderStyle,\r\n\t\t\t\t\ttopBorderColor,\r\n\t\t\t\t\ttopBorderStyle,\r\n\t\t\t\t\tbottomBorderColor,\r\n\t\t\t\t\tbottomBorderStyle\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tif (height) {\r\n\t\t\t\tif (rowHeight === undefined || rowHeight < height) {\r\n\t\t\t\t\trowHeight = height\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn generateCell(\r\n\t\t\t\trowNumber,\r\n\t\t\t\tcolumnIndex,\r\n\t\t\t\tvalue,\r\n\t\t\t\ttype,\r\n\t\t\t\tcellStyleId,\r\n\t\t\t\tgetSharedString\r\n\t\t\t)\r\n\t\t})\r\n\t\t.join('')\r\n\r\n\treturn `<row r=\"${rowNumber}\"` +\r\n\t\t(rowHeight ? ` ht=\"${rowHeight}\" customHeight=\"1\"` : '') +\r\n\t\t'>' +\r\n\t\trowCells +\r\n\t\t'</row>'\r\n}\r\n\r\nfunction isEmpty(value) {\r\n  return value === undefined || value === null || value === ''\r\n}\r\n\r\nfunction detectValueType(value) {\r\n  switch (typeof value) {\r\n    case 'string':\r\n      return String\r\n    case 'number':\r\n      return Number\r\n    case 'boolean':\r\n      return Boolean\r\n    default:\r\n      if (value instanceof Date) {\r\n        return Date\r\n      }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}