{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n} // There seem to be about 100 \"built-in\" formats in Excel.\n// https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2010/ee857658(v=office.14)?redirectedfrom=MSDN\n\n\nvar FORMAT_ID_STARTS_FROM = 100;\nexport default function initStyles(_ref) {\n  var defaultFontFamily = _ref.fontFamily,\n      defaultFontSize = _ref.fontSize;\n  var customFont = Boolean(defaultFontFamily || defaultFontSize);\n\n  if (defaultFontFamily === undefined) {\n    defaultFontFamily = 'Calibri';\n  }\n\n  if (defaultFontSize === undefined) {\n    defaultFontSize = 12;\n  }\n\n  var formats = [];\n  var formatsIndex = {};\n  var styles = [];\n  var stylesIndex = {};\n  var fonts = [];\n  var fontsIndex = {};\n  var fills = [];\n  var fillsIndex = {};\n  var borders = [];\n  var bordersIndex = {}; // Default font.\n\n  fonts.push({\n    size: defaultFontSize,\n    family: defaultFontFamily,\n    custom: customFont\n  });\n  fontsIndex['-:-'] = 0; // Default fill.\n\n  fills.push({});\n  fillsIndex['-'] = 0; // Default border.\n\n  borders.push({\n    left: {},\n    right: {},\n    top: {},\n    bottom: {}\n  });\n  bordersIndex['-:-/-:-/-:-/-:-'] = 0; // \"gray125\" fill.\n  // For some weird reason, MS Office 2007 Excel seems to require that to be present.\n  // Otherwise, if absent, it would replace the first `backgroundColor`.\n\n  fills.push({\n    gray125: true\n  });\n\n  function getStyle(fontFamily, fontSize, fontWeight, fontStyle, align, alignVertical, format, wrap, color, backgroundColor, borderColor, borderStyle, leftBorderColor, leftBorderStyle, rightBorderColor, rightBorderStyle, topBorderColor, topBorderStyle, bottomBorderColor, bottomBorderStyle) {\n    // Custom borders aren't supported.\n    var border = undefined; // Look for an existing style.\n\n    var fontKey = \"\".concat(fontFamily || '-', \":\").concat(fontSize || '-', \":\").concat(fontWeight || '-', \":\").concat(fontStyle || '-', \":\").concat(color || '-');\n    var fillKey = backgroundColor || '-';\n    var borderKey = \"\".concat(topBorderColor || borderColor || '-', \":\").concat(topBorderStyle || borderStyle || '-') + '/' + \"\".concat(rightBorderColor || borderColor || '-', \":\").concat(rightBorderStyle || borderStyle || '-') + '/' + \"\".concat(bottomBorderColor || borderColor || '-', \":\").concat(bottomBorderStyle || borderStyle || '-') + '/' + \"\".concat(leftBorderColor || borderColor || '-', \":\").concat(leftBorderStyle || borderStyle || '-');\n    var key = \"\".concat(align || '-', \"/\").concat(alignVertical || '-', \"/\").concat(format || '-', \"/\").concat(wrap || '-', \"/\").concat(fontKey, \"/\").concat(fillKey, \"/\").concat(borderKey);\n    var styleId = stylesIndex[key];\n\n    if (styleId !== undefined) {\n      return styleId;\n    } // Create new style.\n    // Get format ID.\n\n\n    var formatId;\n\n    if (format) {\n      formatId = formatsIndex[format];\n\n      if (formatId === undefined) {\n        formatId = formatsIndex[format] = String(FORMAT_ID_STARTS_FROM + formats.length);\n        formats.push(format);\n      }\n    } // Get font ID.\n\n\n    var fontId = customFont ? 0 : undefined;\n\n    if (fontWeight || fontStyle || color) {\n      fontId = fontsIndex[fontKey];\n\n      if (fontId === undefined) {\n        fontId = fontsIndex[fontKey] = String(fonts.length);\n        fonts.push({\n          custom: true,\n          size: fontSize || defaultFontSize,\n          family: fontFamily || defaultFontFamily,\n          weight: fontWeight,\n          style: fontStyle,\n          color: color\n        });\n      }\n    } // Get fill ID.\n\n\n    var fillId;\n\n    if (backgroundColor) {\n      fillId = fillsIndex[fillKey];\n\n      if (fillId === undefined) {\n        fillId = fillsIndex[fillKey] = String(fills.length);\n        fills.push({\n          color: backgroundColor\n        });\n      }\n    } // Get border ID.\n\n\n    var borderId;\n\n    if (borderColor || borderStyle || leftBorderColor || leftBorderStyle || rightBorderColor || rightBorderStyle || topBorderColor || topBorderStyle || bottomBorderColor || bottomBorderStyle) {\n      borderId = bordersIndex[borderKey];\n\n      if (borderId === undefined) {\n        borderId = bordersIndex[borderKey] = String(borders.length);\n        borders.push({\n          left: {\n            style: leftBorderStyle || borderStyle,\n            color: leftBorderColor || borderColor\n          },\n          right: {\n            style: rightBorderStyle || borderStyle,\n            color: rightBorderColor || borderColor\n          },\n          top: {\n            style: topBorderStyle || borderStyle,\n            color: topBorderColor || borderColor\n          },\n          bottom: {\n            style: bottomBorderStyle || borderStyle,\n            color: bottomBorderColor || borderColor\n          }\n        });\n      }\n    } // Add a style.\n\n\n    styles.push({\n      fontId: fontId,\n      fillId: fillId,\n      borderId: borderId,\n      align: align,\n      alignVertical: alignVertical,\n      wrap: wrap,\n      formatId: formatId\n    });\n    return stylesIndex[key] = String(styles.length - 1);\n  } // Add the default style.\n\n\n  getStyle();\n  return {\n    getStylesXml: function getStylesXml() {\n      return generateXml({\n        formats: formats,\n        styles: styles,\n        fonts: fonts,\n        fills: fills,\n        borders: borders\n      });\n    },\n    getStyle: getStyle\n  };\n}\n\nfunction generateXml(_ref2) {\n  var formats = _ref2.formats,\n      styles = _ref2.styles,\n      fonts = _ref2.fonts,\n      fills = _ref2.fills,\n      borders = _ref2.borders;\n  var xml = '<?xml version=\"1.0\" ?>';\n  xml += '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">'; // Turns out, as weird as it sounds, the order of XML elements matters to MS Office Excel.\n  // https://social.msdn.microsoft.com/Forums/office/en-US/cc47ab65-dab7-4e32-b676-b641aa1e1411/how-to-validate-the-xlsx-that-i-generate?forum=oxmlsdk\n  // For example, previously this library was inserting `<cellXfs/>` before `<fonts/>`\n  // and that caused MS Office 2007 Excel to throw an error about the file being corrupt:\n  // \"Excel found unreadable content in '*.xlsx'. Do you want to recover the contents of this workbook?\"\n  // \"Excel was able to open the file by repairing or removing the unreadable content.\"\n  // \"Removed Part: /xl/styles.xml part with XML error.  (Styles) Load error. Line 1, column ...\"\n  // \"Repaired Records: Cell information from /xl/worksheets/sheet1.xml part\"\n\n  if (formats.length > 0) {\n    xml += \"<numFmts count=\\\"\".concat(formats.length, \"\\\">\");\n\n    for (var i = 0; i < formats.length; i++) {\n      xml += \"<numFmt numFmtId=\\\"\".concat(FORMAT_ID_STARTS_FROM + i, \"\\\" formatCode=\\\"\").concat(formats[i], \"\\\"/>\");\n    }\n\n    xml += \"</numFmts>\";\n  }\n\n  xml += \"<fonts count=\\\"\".concat(fonts.length, \"\\\">\");\n\n  for (var _iterator = _createForOfIteratorHelperLoose(fonts), _step; !(_step = _iterator()).done;) {\n    var font = _step.value;\n    var size = font.size,\n        family = font.family,\n        color = font.color,\n        weight = font.weight,\n        style = font.style,\n        custom = font.custom;\n    xml += '<font>';\n    xml += \"<sz val=\\\"\".concat(size, \"\\\"/>\");\n    xml += \"<color \".concat(color ? 'rgb=\"' + getColor(color) + '\"' : 'theme=\"1\"', \"/>\");\n    xml += \"<name val=\\\"\".concat(family, \"\\\"/>\"); // It's not clear what the `<family/>` tag means or does.\n    // It seems to always be `<family val=\"2\"/>` even for different\n    // font families (Calibri, Arial, etc).\n\n    xml += '<family val=\"2\"/>'; //\n    // It's not clear what the `<scheme/>` tag means or does.\n    // Seems like it's only preset for the default \"Calibri\" font.\n    // Adding it to any other font resets the font family in Microsoft Excel 2007.\n    //\n    // \"Defines the font scheme, if any, to which this font belongs.\n    //  When a font definition is part of a theme definition, then the font\n    //  is categorized as either a \"major\" or \"minor\" font scheme component.\n    //  When a new theme is chosen, every font that is part of a theme definition\n    //  is updated to use the new \"major\" or \"minor\" font definition for that theme.\n    //  Usually \"major\" fonts are used for styles like headings,\n    //  and \"minor\" fonts are used for body and paragraph text.\"\n    //\n    // https://hackage.haskell.org/package/xlsx-0.8.4/docs/Codec-Xlsx-Types-StyleSheet.html\n    //\n\n    if (!custom) {\n      xml += '<scheme val=\"minor\"/>';\n    }\n\n    if (weight === 'bold') {\n      xml += '<b/>';\n    }\n\n    if (style === 'italic') {\n      xml += '<i/>';\n    }\n\n    xml += '</font>';\n  }\n\n  xml += '</fonts>'; // MS Office 2007 Excel seems to require a `<fills/>` element to exist.\n  // without it, MS Office 2007 Excel thinks that the file is broken.\n\n  xml += \"<fills count=\\\"\".concat(fills.length, \"\\\">\");\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(fills), _step2; !(_step2 = _iterator2()).done;) {\n    var fill = _step2.value;\n    var _color = fill.color,\n        gray125 = fill.gray125;\n    xml += '<fill>';\n\n    if (_color) {\n      xml += '<patternFill patternType=\"solid\">';\n      xml += \"<fgColor rgb=\\\"\".concat(getColor(_color), \"\\\"/>\"); // Whatever that could mean.\n\n      xml += '<bgColor indexed=\"64\"/>';\n      xml += '</patternFill>';\n    } else if (gray125) {\n      // \"gray125\" fill.\n      // For some weird reason, MS Office 2007 Excel seems to require that to be present.\n      // Otherwise, if absent, it would replace the first `backgroundColor`.\n      xml += '<patternFill patternType=\"gray125\"/>';\n    } else {\n      xml += '<patternFill patternType=\"none\"/>';\n    }\n\n    xml += '</fill>';\n  }\n\n  xml += '</fills>'; // MS Office 2007 Excel seems to require a `<borders/>` element to exist:\n  // without it, MS Office 2007 Excel thinks that the file is broken.\n\n  xml += \"<borders count=\\\"\".concat(borders.length, \"\\\">\");\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(borders), _step3; !(_step3 = _iterator3()).done;) {\n    var border = _step3.value;\n    var left = border.left,\n        right = border.right,\n        top = border.top,\n        bottom = border.bottom;\n\n    var getBorderXml = function getBorderXml(direction, _ref3) {\n      var style = _ref3.style,\n          color = _ref3.color;\n\n      if (color && !style) {\n        style = 'thin';\n      }\n\n      var hasChildren = color ? true : false;\n      return \"<\".concat(direction) + (style ? \" style=\\\"\".concat(style, \"\\\"\") : '') + (hasChildren ? '>' : '/>') + (color ? \"<color rgb=\\\"\".concat(getColor(color), \"\\\"/>\") : '') + (hasChildren ? \"</\".concat(direction, \">\") : '');\n    };\n\n    xml += '<border>';\n    xml += getBorderXml('left', left);\n    xml += getBorderXml('right', right);\n    xml += getBorderXml('top', top);\n    xml += getBorderXml('bottom', bottom);\n    xml += '<diagonal/>';\n    xml += '</border>';\n  }\n\n  xml += '</borders>'; // What are `<cellXfs/>` and `<cellStyleXfs/>`:\n  // http://officeopenxml.com/SSstyles.php\n  //\n  // `<cellStyleXfs/>` are referenced from `<cellXfs/>` as `<xf xfId=\"...\"/>`.\n  // `<cellStyleXfs/>` defines abstract \"cell styles\" that can be \"extended\"\n  // by \"cell styles\" defined by `<cellXfs/>` that can be applied to individual cells:\n  // 1. `<cellStyleXfs><xf .../></cellStyleXfs>`\n  // 2. `<cellXfs><xf xfId={cellStyleXfs.xf.index}/></cellXfs>`\n  // 3. `<c s={cellXfs.xf.index}/>`\n  // Seems like \"cell styles\" defined by `<cellXfs/>` have to reference\n  // some abstract \"cell styles\" defined by `<cellStyleXfs/>` by the spec.\n  // Otherwise, there would be no need to use `<cellStyleXfs/>` at all.\n  // The naming is ambiguous and weird. The whole scheme is needlessly redundant.\n  // xml += '<cellStyleXfs count=\"2\">'\n  // xml += '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/>'\n  // // `applyFont=\"1\"` means apply a custom font in this \"abstract\" \"cell style\"\n  // // rather than using a default font.\n  // // Seems like by default `applyFont` is `\"0\"` meaning that,\n  // // unless `\"1\"` is specified, it would ignore the `fontId` attribute.\n  // xml += '<xf numFmtId=\"0\" fontId=\"1\" applyFont=\"1\" fillId=\"0\" borderId=\"0\"/>'\n  // xml += '</cellStyleXfs>'\n\n  xml += \"<cellXfs count=\\\"\".concat(styles.length, \"\\\">\");\n\n  for (var _iterator4 = _createForOfIteratorHelperLoose(styles), _step4; !(_step4 = _iterator4()).done;) {\n    var cellStyle = _step4.value;\n    var fontId = cellStyle.fontId,\n        fillId = cellStyle.fillId,\n        borderId = cellStyle.borderId,\n        align = cellStyle.align,\n        alignVertical = cellStyle.alignVertical,\n        wrap = cellStyle.wrap,\n        formatId = cellStyle.formatId; // `applyNumberFormat=\"1\"` means \"apply the `numFmtId` attribute\".\n    // Seems like by default `applyNumberFormat` is `\"0\"` meaning that,\n    // unless `\"1\"` is specified, it would ignore the `numFmtId` attribute.\n\n    xml += '<xf ' + [formatId !== undefined ? \"numFmtId=\\\"\".concat(formatId, \"\\\"\") : undefined, formatId !== undefined ? 'applyNumberFormat=\"1\"' : undefined, fontId !== undefined ? \"fontId=\\\"\".concat(fontId, \"\\\"\") : undefined, fontId !== undefined ? 'applyFont=\"1\"' : undefined, fillId !== undefined ? \"fillId=\\\"\".concat(fillId, \"\\\"\") : undefined, fillId !== undefined ? 'applyFill=\"1\"' : undefined, borderId !== undefined ? \"borderId=\\\"\".concat(borderId, \"\\\"\") : undefined, borderId !== undefined ? 'applyBorder=\"1\"' : undefined, align || alignVertical || wrap ? 'applyAlignment=\"1\"' : undefined // 'xfId=\"0\"'\n    ].filter(function (_) {\n      return _;\n    }).join(' ') + '>' + ( // Possible horizontal alignment values:\n    //  left, center, right, fill, justify, center_across, distributed.\n    // Possible vertical alignment values:\n    //  top, vcenter, bottom, vjustify, vdistributed.\n    // https://xlsxwriter.readthedocs.io/format.html#set_align\n    align || alignVertical || wrap ? '<alignment' + (align ? \" horizontal=\\\"\".concat(align, \"\\\"\") : '') + (alignVertical ? \" vertical=\\\"\".concat(alignVertical, \"\\\"\") : '') + (wrap ? \" wrapText=\\\"1\\\"\" : '') + '/>' : '') + '</xf>';\n  }\n\n  xml += \"</cellXfs>\";\n  xml += '</styleSheet>';\n  return xml;\n}\n\nfunction getColor(color) {\n  if (color[0] !== '#') {\n    throw new Error(\"Color \\\"\".concat(color, \"\\\" must start with a \\\"#\\\"\"));\n  }\n\n  return \"FF\".concat(color.slice('#'.length).toUpperCase());\n}","map":{"version":3,"mappings":"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","names":["FORMAT_ID_STARTS_FROM","initStyles","defaultFontFamily","fontFamily","defaultFontSize","fontSize","customFont","Boolean","undefined","formats","formatsIndex","styles","stylesIndex","fonts","fontsIndex","fills","fillsIndex","borders","bordersIndex","push","size","family","custom","left","right","top","bottom","gray125","getStyle","fontWeight","fontStyle","align","alignVertical","format","wrap","color","backgroundColor","borderColor","borderStyle","leftBorderColor","leftBorderStyle","rightBorderColor","rightBorderStyle","topBorderColor","topBorderStyle","bottomBorderColor","bottomBorderStyle","border","fontKey","fillKey","borderKey","key","styleId","formatId","String","length","fontId","weight","style","fillId","borderId","getStylesXml","generateXml","xml","i","font","getColor","fill","getBorderXml","direction","hasChildren","cellStyle","filter","_","join","Error","slice","toUpperCase"],"sources":["C:\\Users\\anasn\\Downloads\\Bachelor-Defense-System-5\\my-app\\node_modules\\write-excel-file\\source\\write\\styles.js"],"sourcesContent":["// There seem to be about 100 \"built-in\" formats in Excel.\r\n// https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2010/ee857658(v=office.14)?redirectedfrom=MSDN\r\nconst FORMAT_ID_STARTS_FROM = 100\r\n\r\nexport default function initStyles({\r\n  fontFamily: defaultFontFamily,\r\n  fontSize: defaultFontSize\r\n}) {\r\n  const customFont = Boolean(defaultFontFamily || defaultFontSize)\r\n\r\n  if (defaultFontFamily === undefined) {\r\n    defaultFontFamily = 'Calibri'\r\n  }\r\n\r\n  if (defaultFontSize === undefined) {\r\n    defaultFontSize = 12\r\n  }\r\n\r\n  const formats = []\r\n  const formatsIndex = {}\r\n\r\n  const styles = []\r\n  const stylesIndex = {}\r\n\r\n  const fonts = []\r\n  const fontsIndex = {}\r\n\r\n  const fills = []\r\n  const fillsIndex = {}\r\n\r\n  const borders = []\r\n  const bordersIndex = {}\r\n\r\n  // Default font.\r\n  fonts.push({\r\n    size: defaultFontSize,\r\n    family: defaultFontFamily,\r\n    custom: customFont\r\n  })\r\n  fontsIndex['-:-'] = 0\r\n\r\n  // Default fill.\r\n  fills.push({})\r\n  fillsIndex['-'] = 0\r\n\r\n  // Default border.\r\n  borders.push({\r\n    left: {},\r\n    right: {},\r\n    top: {},\r\n    bottom: {}\r\n  })\r\n  bordersIndex['-:-/-:-/-:-/-:-'] = 0\r\n\r\n  // \"gray125\" fill.\r\n  // For some weird reason, MS Office 2007 Excel seems to require that to be present.\r\n  // Otherwise, if absent, it would replace the first `backgroundColor`.\r\n  fills.push({\r\n    gray125: true\r\n  })\r\n\r\n  function getStyle(\r\n    fontFamily,\r\n    fontSize,\r\n    fontWeight,\r\n    fontStyle,\r\n    align,\r\n    alignVertical,\r\n    format,\r\n    wrap,\r\n    color,\r\n    backgroundColor,\r\n    borderColor,\r\n    borderStyle,\r\n    leftBorderColor,\r\n    leftBorderStyle,\r\n    rightBorderColor,\r\n    rightBorderStyle,\r\n    topBorderColor,\r\n    topBorderStyle,\r\n    bottomBorderColor,\r\n    bottomBorderStyle,\r\n  ) {\r\n    // Custom borders aren't supported.\r\n    const border = undefined\r\n    // Look for an existing style.\r\n    const fontKey = `${fontFamily || '-'}:${fontSize || '-'}:${fontWeight || '-'}:${fontStyle || '-'}:${color || '-'}`\r\n    const fillKey = backgroundColor || '-'\r\n    const borderKey =\r\n      `${(topBorderColor || borderColor) || '-'}:${(topBorderStyle || borderStyle) || '-'}` +\r\n      '/' +\r\n      `${(rightBorderColor || borderColor) || '-'}:${(rightBorderStyle || borderStyle) || '-'}` +\r\n      '/' +\r\n      `${(bottomBorderColor || borderColor) || '-'}:${(bottomBorderStyle || borderStyle) || '-'}` +\r\n      '/' +\r\n      `${(leftBorderColor || borderColor) || '-'}:${(leftBorderStyle || borderStyle) || '-'}`\r\n    const key = `${align || '-'}/${alignVertical || '-'}/${format || '-'}/${wrap || '-'}/${fontKey}/${fillKey}/${borderKey}`\r\n    const styleId = stylesIndex[key]\r\n    if (styleId !== undefined) {\r\n      return styleId\r\n    }\r\n    // Create new style.\r\n    // Get format ID.\r\n    let formatId\r\n    if (format) {\r\n      formatId = formatsIndex[format]\r\n      if (formatId === undefined) {\r\n        formatId = formatsIndex[format] = String(FORMAT_ID_STARTS_FROM + formats.length)\r\n        formats.push(format)\r\n      }\r\n    }\r\n    // Get font ID.\r\n    let fontId = customFont ? 0 : undefined\r\n    if (fontWeight || fontStyle || color) {\r\n      fontId = fontsIndex[fontKey]\r\n      if (fontId === undefined) {\r\n        fontId = fontsIndex[fontKey] = String(fonts.length)\r\n        fonts.push({\r\n          custom: true,\r\n          size: fontSize || defaultFontSize,\r\n          family: fontFamily || defaultFontFamily,\r\n          weight: fontWeight,\r\n          style: fontStyle,\r\n          color\r\n        })\r\n      }\r\n    }\r\n    // Get fill ID.\r\n    let fillId\r\n    if (backgroundColor) {\r\n      fillId = fillsIndex[fillKey]\r\n      if (fillId === undefined) {\r\n        fillId = fillsIndex[fillKey] = String(fills.length)\r\n        fills.push({\r\n          color: backgroundColor\r\n        })\r\n      }\r\n    }\r\n    // Get border ID.\r\n    let borderId\r\n    if (\r\n      borderColor ||\r\n      borderStyle ||\r\n      leftBorderColor ||\r\n      leftBorderStyle ||\r\n      rightBorderColor ||\r\n      rightBorderStyle ||\r\n      topBorderColor ||\r\n      topBorderStyle ||\r\n      bottomBorderColor ||\r\n      bottomBorderStyle\r\n    ) {\r\n      borderId = bordersIndex[borderKey]\r\n      if (borderId === undefined) {\r\n        borderId = bordersIndex[borderKey] = String(borders.length)\r\n        borders.push({\r\n          left: {\r\n            style: leftBorderStyle || borderStyle,\r\n            color: leftBorderColor || borderColor\r\n          },\r\n          right: {\r\n            style: rightBorderStyle || borderStyle,\r\n            color: rightBorderColor || borderColor\r\n          },\r\n          top: {\r\n            style: topBorderStyle || borderStyle,\r\n            color: topBorderColor || borderColor\r\n          },\r\n          bottom: {\r\n            style: bottomBorderStyle || borderStyle,\r\n            color: bottomBorderColor || borderColor\r\n          }\r\n        })\r\n      }\r\n    }\r\n    // Add a style.\r\n    styles.push({\r\n      fontId,\r\n      fillId,\r\n      borderId,\r\n      align,\r\n      alignVertical,\r\n      wrap,\r\n      formatId\r\n    })\r\n    return stylesIndex[key] = String(styles.length - 1)\r\n  }\r\n\r\n  // Add the default style.\r\n  getStyle()\r\n\r\n  return {\r\n    getStylesXml() {\r\n      return generateXml({ formats, styles, fonts, fills, borders })\r\n    },\r\n    getStyle\r\n  }\r\n}\r\n\r\nfunction generateXml({ formats, styles, fonts, fills, borders }) {\r\n  let xml = '<?xml version=\"1.0\" ?>'\r\n  xml += '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">'\r\n\r\n  // Turns out, as weird as it sounds, the order of XML elements matters to MS Office Excel.\r\n  // https://social.msdn.microsoft.com/Forums/office/en-US/cc47ab65-dab7-4e32-b676-b641aa1e1411/how-to-validate-the-xlsx-that-i-generate?forum=oxmlsdk\r\n  // For example, previously this library was inserting `<cellXfs/>` before `<fonts/>`\r\n  // and that caused MS Office 2007 Excel to throw an error about the file being corrupt:\r\n  // \"Excel found unreadable content in '*.xlsx'. Do you want to recover the contents of this workbook?\"\r\n  // \"Excel was able to open the file by repairing or removing the unreadable content.\"\r\n  // \"Removed Part: /xl/styles.xml part with XML error.  (Styles) Load error. Line 1, column ...\"\r\n  // \"Repaired Records: Cell information from /xl/worksheets/sheet1.xml part\"\r\n\r\n  if (formats.length > 0) {\r\n    xml += `<numFmts count=\"${formats.length}\">`\r\n    for (let i = 0; i < formats.length; i++) {\r\n      xml += `<numFmt numFmtId=\"${FORMAT_ID_STARTS_FROM + i}\" formatCode=\"${formats[i]}\"/>`\r\n    }\r\n    xml += `</numFmts>`\r\n  }\r\n\r\n  xml += `<fonts count=\"${fonts.length}\">`\r\n  for (const font of fonts) {\r\n    const {\r\n      size,\r\n      family,\r\n      color,\r\n      weight,\r\n      style,\r\n      custom\r\n    } = font\r\n    xml += '<font>'\r\n    xml += `<sz val=\"${size}\"/>`\r\n    xml += `<color ${color ? 'rgb=\"' + getColor(color) + '\"' : 'theme=\"1\"'}/>`\r\n    xml += `<name val=\"${family}\"/>`\r\n    // It's not clear what the `<family/>` tag means or does.\r\n    // It seems to always be `<family val=\"2\"/>` even for different\r\n    // font families (Calibri, Arial, etc).\r\n    xml += '<family val=\"2\"/>'\r\n    //\r\n    // It's not clear what the `<scheme/>` tag means or does.\r\n    // Seems like it's only preset for the default \"Calibri\" font.\r\n    // Adding it to any other font resets the font family in Microsoft Excel 2007.\r\n    //\r\n    // \"Defines the font scheme, if any, to which this font belongs.\r\n    //  When a font definition is part of a theme definition, then the font\r\n    //  is categorized as either a \"major\" or \"minor\" font scheme component.\r\n    //  When a new theme is chosen, every font that is part of a theme definition\r\n    //  is updated to use the new \"major\" or \"minor\" font definition for that theme.\r\n    //  Usually \"major\" fonts are used for styles like headings,\r\n    //  and \"minor\" fonts are used for body and paragraph text.\"\r\n    //\r\n    // https://hackage.haskell.org/package/xlsx-0.8.4/docs/Codec-Xlsx-Types-StyleSheet.html\r\n    //\r\n    if (!custom) {\r\n      xml += '<scheme val=\"minor\"/>'\r\n    }\r\n    if (weight === 'bold') {\r\n      xml += '<b/>'\r\n    }\r\n    if (style === 'italic') {\r\n      xml += '<i/>'\r\n    }\r\n    xml += '</font>'\r\n  }\r\n  xml += '</fonts>'\r\n\r\n  // MS Office 2007 Excel seems to require a `<fills/>` element to exist.\r\n  // without it, MS Office 2007 Excel thinks that the file is broken.\r\n  xml += `<fills count=\"${fills.length}\">`\r\n  for (const fill of fills) {\r\n    const { color, gray125 } = fill\r\n    xml += '<fill>'\r\n    if (color) {\r\n      xml += '<patternFill patternType=\"solid\">'\r\n      xml += `<fgColor rgb=\"${getColor(color)}\"/>`\r\n      // Whatever that could mean.\r\n      xml += '<bgColor indexed=\"64\"/>'\r\n      xml += '</patternFill>'\r\n    } else if (gray125) {\r\n      // \"gray125\" fill.\r\n      // For some weird reason, MS Office 2007 Excel seems to require that to be present.\r\n      // Otherwise, if absent, it would replace the first `backgroundColor`.\r\n      xml += '<patternFill patternType=\"gray125\"/>'\r\n    } else {\r\n      xml += '<patternFill patternType=\"none\"/>'\r\n    }\r\n    xml += '</fill>'\r\n  }\r\n  xml += '</fills>'\r\n\r\n  // MS Office 2007 Excel seems to require a `<borders/>` element to exist:\r\n  // without it, MS Office 2007 Excel thinks that the file is broken.\r\n  xml += `<borders count=\"${borders.length}\">`\r\n  for (const border of borders) {\r\n    const {\r\n      left,\r\n      right,\r\n      top,\r\n      bottom\r\n    } = border\r\n    const getBorderXml = (direction, { style, color }) => {\r\n      if (color && !style) {\r\n        style = 'thin'\r\n      }\r\n      const hasChildren = color ? true : false\r\n      return `<${direction}` +\r\n        (style ? ` style=\"${style}\"` : '') +\r\n        (hasChildren ? '>' : '/>') +\r\n        (color ? `<color rgb=\"${getColor(color)}\"/>` : '') +\r\n        (hasChildren ? `</${direction}>` : '')\r\n    }\r\n    xml += '<border>'\r\n    xml += getBorderXml('left', left)\r\n    xml += getBorderXml('right', right)\r\n    xml += getBorderXml('top', top)\r\n    xml += getBorderXml('bottom', bottom)\r\n    xml += '<diagonal/>'\r\n    xml += '</border>'\r\n  }\r\n  xml += '</borders>'\r\n\r\n  // What are `<cellXfs/>` and `<cellStyleXfs/>`:\r\n  // http://officeopenxml.com/SSstyles.php\r\n  //\r\n  // `<cellStyleXfs/>` are referenced from `<cellXfs/>` as `<xf xfId=\"...\"/>`.\r\n  // `<cellStyleXfs/>` defines abstract \"cell styles\" that can be \"extended\"\r\n  // by \"cell styles\" defined by `<cellXfs/>` that can be applied to individual cells:\r\n  // 1. `<cellStyleXfs><xf .../></cellStyleXfs>`\r\n  // 2. `<cellXfs><xf xfId={cellStyleXfs.xf.index}/></cellXfs>`\r\n  // 3. `<c s={cellXfs.xf.index}/>`\r\n  // Seems like \"cell styles\" defined by `<cellXfs/>` have to reference\r\n  // some abstract \"cell styles\" defined by `<cellStyleXfs/>` by the spec.\r\n  // Otherwise, there would be no need to use `<cellStyleXfs/>` at all.\r\n  // The naming is ambiguous and weird. The whole scheme is needlessly redundant.\r\n\r\n  // xml += '<cellStyleXfs count=\"2\">'\r\n  // xml += '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/>'\r\n  // // `applyFont=\"1\"` means apply a custom font in this \"abstract\" \"cell style\"\r\n  // // rather than using a default font.\r\n  // // Seems like by default `applyFont` is `\"0\"` meaning that,\r\n  // // unless `\"1\"` is specified, it would ignore the `fontId` attribute.\r\n  // xml += '<xf numFmtId=\"0\" fontId=\"1\" applyFont=\"1\" fillId=\"0\" borderId=\"0\"/>'\r\n  // xml += '</cellStyleXfs>'\r\n\r\n  xml += `<cellXfs count=\"${styles.length}\">`\r\n  for (const cellStyle of styles) {\r\n    const {\r\n      fontId,\r\n      fillId,\r\n      borderId,\r\n      align,\r\n      alignVertical,\r\n      wrap,\r\n      formatId\r\n    } = cellStyle\r\n    // `applyNumberFormat=\"1\"` means \"apply the `numFmtId` attribute\".\r\n    // Seems like by default `applyNumberFormat` is `\"0\"` meaning that,\r\n    // unless `\"1\"` is specified, it would ignore the `numFmtId` attribute.\r\n    xml += '<xf ' +\r\n      [\r\n        formatId !== undefined ? `numFmtId=\"${formatId}\"` : undefined,\r\n        formatId !== undefined ? 'applyNumberFormat=\"1\"' : undefined,\r\n        fontId !== undefined ? `fontId=\"${fontId}\"` : undefined,\r\n        fontId !== undefined ? 'applyFont=\"1\"' : undefined,\r\n        fillId !== undefined ? `fillId=\"${fillId}\"` : undefined,\r\n        fillId !== undefined ? 'applyFill=\"1\"' : undefined,\r\n        borderId !== undefined ? `borderId=\"${borderId}\"` : undefined,\r\n        borderId !== undefined ? 'applyBorder=\"1\"' : undefined,\r\n        align || alignVertical || wrap ? 'applyAlignment=\"1\"' : undefined,\r\n        // 'xfId=\"0\"'\r\n      ].filter(_ => _).join(' ') +\r\n    '>' +\r\n      // Possible horizontal alignment values:\r\n      //  left, center, right, fill, justify, center_across, distributed.\r\n      // Possible vertical alignment values:\r\n      //  top, vcenter, bottom, vjustify, vdistributed.\r\n      // https://xlsxwriter.readthedocs.io/format.html#set_align\r\n      (align || alignVertical || wrap\r\n        ? '<alignment' +\r\n          (align ? ` horizontal=\"${align}\"` : '') +\r\n          (alignVertical ? ` vertical=\"${alignVertical}\"` : '') +\r\n          (wrap ? ` wrapText=\"1\"` : '') +\r\n          '/>'\r\n        : ''\r\n      ) +\r\n    '</xf>'\r\n  }\r\n  xml += `</cellXfs>`\r\n\r\n  xml += '</styleSheet>'\r\n\r\n  return xml\r\n}\r\n\r\nfunction getColor(color) {\r\n  if (color[0] !== '#') {\r\n    throw new Error(`Color \"${color}\" must start with a \"#\"`)\r\n  }\r\n  return `FF${color.slice('#'.length).toUpperCase()}`\r\n}"]},"metadata":{},"sourceType":"module"}