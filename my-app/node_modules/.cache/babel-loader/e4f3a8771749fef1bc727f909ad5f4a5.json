{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport generateWorksheet from './worksheet.js';\nimport initStyles from './styles.js';\nimport initSharedStrings from './sharedStrings.js';\nexport function generateSheets(_ref) {\n  var data = _ref.data,\n      sheetName = _ref.sheetName,\n      sheetNames = _ref.sheetNames,\n      schema = _ref.schema,\n      columns = _ref.columns,\n      headerStyle = _ref.headerStyle,\n      fontFamily = _ref.fontFamily,\n      fontSize = _ref.fontSize,\n      orientation = _ref.orientation,\n      stickyRowsCount = _ref.stickyRowsCount,\n      stickyColumnsCount = _ref.stickyColumnsCount,\n      dateFormat = _ref.dateFormat;\n\n  var _initSharedStrings = initSharedStrings(),\n      getSharedStringsXml = _initSharedStrings.getSharedStringsXml,\n      getSharedString = _initSharedStrings.getSharedString;\n\n  var _initStyles = initStyles({\n    fontFamily: fontFamily,\n    fontSize: fontSize\n  }),\n      getStylesXml = _initStyles.getStylesXml,\n      getStyle = _initStyles.getStyle; // Versions before `1.3.4` had a bug:\n  // In a \"write multiple sheets\" scenario, `columns` parameter\n  // wasn't required to be an array of `columns` for each sheet.\n\n\n  if (sheetNames) {\n    if (columns) {\n      if (!Array.isArray(columns[0])) {\n        throw new Error('In a \"write multiple sheets\" scenario, `columns` parameter must be an array of `columns` for each sheet.');\n      }\n    }\n  }\n\n  if (!sheetNames) {\n    sheetNames = [sheetName || 'Sheet1'];\n    data = [data];\n\n    if (columns) {\n      columns = [columns];\n    }\n\n    if (schema) {\n      schema = [schema];\n    }\n  }\n\n  var worksheets = [];\n  var sheetIndex = 0;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(sheetNames), _step; !(_step = _iterator()).done;) {\n    var sheet = _step.value;\n    worksheets.push(generateWorksheet(data[sheetIndex], {\n      schema: schema && schema[sheetIndex],\n      columns: columns && columns[sheetIndex],\n      headerStyle: headerStyle,\n      getStyle: getStyle,\n      getSharedString: getSharedString,\n      customFont: fontFamily || fontSize,\n      dateFormat: dateFormat,\n      orientation: orientation,\n      stickyRowsCount: stickyRowsCount,\n      stickyColumnsCount: stickyColumnsCount,\n      sheetId: sheetIndex + 1\n    }));\n    sheetIndex++;\n  }\n\n  return {\n    sheets: sheetNames.map(function (sheetName, i) {\n      return {\n        id: i + 1,\n        name: sheetName,\n        data: worksheets[i]\n      };\n    }),\n    getSharedStringsXml: getSharedStringsXml,\n    getStylesXml: getStylesXml\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,iBAAP,MAA8B,gBAA9B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AAEA,OAAO,SAASC,cAAT,OAaJ;EAAA,IAZDC,IAYC,QAZDA,IAYC;EAAA,IAXDC,SAWC,QAXDA,SAWC;EAAA,IAVDC,UAUC,QAVDA,UAUC;EAAA,IATDC,MASC,QATDA,MASC;EAAA,IARDC,OAQC,QARDA,OAQC;EAAA,IAPDC,WAOC,QAPDA,WAOC;EAAA,IANDC,UAMC,QANDA,UAMC;EAAA,IALDC,QAKC,QALDA,QAKC;EAAA,IAJDC,WAIC,QAJDA,WAIC;EAAA,IAHDC,eAGC,QAHDA,eAGC;EAAA,IAFDC,kBAEC,QAFDA,kBAEC;EAAA,IADDC,UACC,QADDA,UACC;;EACD,yBAAiDb,iBAAiB,EAAlE;EAAA,IAAQc,mBAAR,sBAAQA,mBAAR;EAAA,IAA6BC,eAA7B,sBAA6BA,eAA7B;;EACA,kBAAmChB,UAAU,CAAC;IAAES,UAAU,EAAVA,UAAF;IAAcC,QAAQ,EAARA;EAAd,CAAD,CAA7C;EAAA,IAAQO,YAAR,eAAQA,YAAR;EAAA,IAAsBC,QAAtB,eAAsBA,QAAtB,CAFC,CAID;EACA;EACA;;;EACA,IAAIb,UAAJ,EAAgB;IACd,IAAIE,OAAJ,EAAa;MACX,IAAI,CAACY,KAAK,CAACC,OAAND,CAAcZ,OAAO,CAAC,CAAD,CAArBY,CAAL,EAAgC;QAC9B,MAAM,IAAIE,KAAJ,CAAU,0GAAV,CAAN;MACD;IACF;EACF;;EAED,IAAI,CAAChB,UAAL,EAAiB;IACfA,UAAU,GAAG,CAACD,SAAS,IAAI,QAAd,CAAbC;IACAF,IAAI,GAAG,CAACA,IAAD,CAAPA;;IACA,IAAII,OAAJ,EAAa;MACXA,OAAO,GAAG,CAACA,OAAD,CAAVA;IACD;;IACD,IAAID,MAAJ,EAAY;MACVA,MAAM,GAAG,CAACA,MAAD,CAATA;IACD;EACF;;EAED,IAAMgB,UAAU,GAAG,EAAnB;EACA,IAAIC,UAAU,GAAG,CAAjB;;EACA,qDAAoBlB,UAApB,wCAAgC;IAAA,IAArBmB,KAAqB;IAC9BF,UAAU,CAACG,IAAXH,CAAgBvB,iBAAiB,CAACI,IAAI,CAACoB,UAAD,CAAL,EAAmB;MAClDjB,MAAM,EAAEA,MAAM,IAAIA,MAAM,CAACiB,UAAD,CAD0B;MAElDhB,OAAO,EAAEA,OAAO,IAAIA,OAAO,CAACgB,UAAD,CAFuB;MAGlDf,WAAW,EAAXA,WAHkD;MAIlDU,QAAQ,EAARA,QAJkD;MAKlDF,eAAe,EAAfA,eALkD;MAMlDU,UAAU,EAAEjB,UAAU,IAAIC,QANwB;MAOlDI,UAAU,EAAVA,UAPkD;MAQlDH,WAAW,EAAXA,WARkD;MASlDC,eAAe,EAAfA,eATkD;MAUlDC,kBAAkB,EAAlBA,kBAVkD;MAWlDc,OAAO,EAAEJ,UAAU,GAAG;IAX4B,CAAnB,CAAjCD;IAaAC,UAAU;EACX;;EAED,OAAO;IACLK,MAAM,EAAEvB,UAAU,CAACwB,GAAXxB,CAAe,UAACD,SAAD,EAAY0B,CAAZ;MAAA,OAAmB;QACxCC,EAAE,EAAED,CAAC,GAAG,CADgC;QAExCE,IAAI,EAAE5B,SAFkC;QAGxCD,IAAI,EAAEmB,UAAU,CAACQ,CAAD;MAHwB,CAAnB;IAAf,EADH;IAMLf,mBAAmB,EAAnBA,mBANK;IAOLE,YAAY,EAAZA;EAPK,CAAP;AASD","names":["generateWorksheet","initStyles","initSharedStrings","generateSheets","data","sheetName","sheetNames","schema","columns","headerStyle","fontFamily","fontSize","orientation","stickyRowsCount","stickyColumnsCount","dateFormat","getSharedStringsXml","getSharedString","getStylesXml","getStyle","Array","isArray","Error","worksheets","sheetIndex","sheet","push","customFont","sheetId","sheets","map","i","id","name"],"sources":["C:\\Users\\anasn\\Downloads\\Bachelor-Defense-System-5\\my-app\\node_modules\\write-excel-file\\source\\write\\writeXlsxFile.common.js"],"sourcesContent":["import generateWorksheet from './worksheet.js'\r\nimport initStyles from './styles.js'\r\nimport initSharedStrings from './sharedStrings.js'\r\n\r\nexport function generateSheets({\r\n  data,\r\n  sheetName,\r\n  sheetNames,\r\n  schema,\r\n  columns,\r\n  headerStyle,\r\n  fontFamily,\r\n  fontSize,\r\n  orientation,\r\n  stickyRowsCount,\r\n  stickyColumnsCount,\r\n  dateFormat\r\n}) {\r\n  const { getSharedStringsXml, getSharedString } = initSharedStrings()\r\n  const { getStylesXml, getStyle } = initStyles({ fontFamily, fontSize })\r\n\r\n  // Versions before `1.3.4` had a bug:\r\n  // In a \"write multiple sheets\" scenario, `columns` parameter\r\n  // wasn't required to be an array of `columns` for each sheet.\r\n  if (sheetNames) {\r\n    if (columns) {\r\n      if (!Array.isArray(columns[0])) {\r\n        throw new Error('In a \"write multiple sheets\" scenario, `columns` parameter must be an array of `columns` for each sheet.');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!sheetNames) {\r\n    sheetNames = [sheetName || 'Sheet1']\r\n    data = [data]\r\n    if (columns) {\r\n      columns = [columns]\r\n    }\r\n    if (schema) {\r\n      schema = [schema]\r\n    }\r\n  }\r\n\r\n  const worksheets = []\r\n  let sheetIndex = 0\r\n  for (const sheet of sheetNames) {\r\n    worksheets.push(generateWorksheet(data[sheetIndex], {\r\n      schema: schema && schema[sheetIndex],\r\n      columns: columns && columns[sheetIndex],\r\n      headerStyle,\r\n      getStyle,\r\n      getSharedString,\r\n      customFont: fontFamily || fontSize,\r\n      dateFormat,\r\n      orientation,\r\n      stickyRowsCount,\r\n      stickyColumnsCount,\r\n      sheetId: sheetIndex + 1\r\n    }))\r\n    sheetIndex++\r\n  }\r\n\r\n  return {\r\n    sheets: sheetNames.map((sheetName, i) => ({\r\n      id: i + 1,\r\n      name: sheetName,\r\n      data: worksheets[i]\r\n    })),\r\n    getSharedStringsXml,\r\n    getStylesXml\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}